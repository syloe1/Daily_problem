#include <bits/stdc++.h>
using namespace std; 
int main() {
    int q;cin>>q; 
    stack<int> st;
    for(int i = 0; i < q; i++) {
        int c;cin>>c;
        if(c==1) {
            int x;cin>>x; st.push(x);
        }
        else {
            if(!st.empty()) {
                cout<<st.top()<<'\n';
                st.pop();
            } else {
                cout<<0<<'\n';
            }
        }
    }
    return 0;
}
/*
问题建模

有一个牌堆，初始时可以看作有 100 张写着 0 的卡片。

我们要处理一系列操作，操作有两种：

类型 1：在牌堆顶放一张写着 x 的卡片。

类型 2：从牌堆顶取出一张卡片，并输出这张卡片的数字。

保证操作过程中牌堆不会彻底空掉。

关键点

初始的 100 张 0 卡片，可以理解为无限个“默认的 0”卡片。

因此实际实现时，不需要真的存放 100 个 0，只要保证：

当栈中有自己放的卡片时，弹出的就是栈顶卡片的值。

当栈为空时，弹出的就是默认的 0。

数据结构选择

用一个 栈（stack） 来模拟牌堆：

入栈表示“放卡片”。

出栈表示“移除卡片并输出其值”。

当栈为空时，说明上面全是默认的 0，此时输出 0 即可。

处理过程

读入 
𝑄
Q（操作个数）。

依次处理每个操作：

如果是 1 x → 把 x 压入栈。

如果是 2 →

若栈不为空，弹出并输出栈顶的值。

若栈为空，输出 0。

复杂度分析

每个操作只涉及一次压栈或出栈，时间复杂度 
𝑂
(
𝑄
)
O(Q)。

栈最多存储 
𝑄
Q 个数，空间复杂度 
𝑂
(
𝑄
)
O(Q)。
*/